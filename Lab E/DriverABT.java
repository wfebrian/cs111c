import java.util.Iterator;/**  * A driver that demonstrates the class ArrayBinaryTree. *  * @author Charles Hoot * @version 2.0 */public class DriverABT {    public static void main(String args[])    {        BinaryTreeInterface<String> leaf1 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> leaf2 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> leaf3 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> leaf4 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> leaf5 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> leaf6 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev3int1 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev3int2 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev3int3 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev3int4 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev2int1 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev2int2 = new ArrayBinaryTree<String>();        BinaryTreeInterface<String> lev1int1 = new ArrayBinaryTree<String>();                leaf1.setTree("A", null, null);        leaf2.setTree("B", null, null);        leaf3.setTree("C", null, null);        leaf4.setTree("D", null, null);        leaf5.setTree("E", null, null);        leaf6.setTree("F", null, null);        lev3int1.setTree("G", null, leaf1);         lev3int2.setTree("H", leaf2, null);         lev3int3.setTree("I", leaf3, leaf4);         lev3int4.setTree("J", leaf5, leaf6);         lev2int1.setTree("K", lev3int1, lev3int2);         lev2int2.setTree("L", lev3int3, lev3int4);         lev1int1.setTree("M", lev2int1, lev2int2);             	System.out.println("\nThe tree has " + lev1int1.getNumberOfNodes() +                            " nodes (should be 13)" + " and is of height " +                            lev1int1.getHeight() + " (should be 4)");        System.out.println();                System.out.println("\n\nInorder traversal:");        System.out.println("Expected: G  A  K  B  H  M  C  I  D  L  E  J  F");        System.out.print(  "Actual:   ");        Iterator<String> iter = lev1int1.getInorderIterator();        while (iter.hasNext())        {            System.out.print(iter.next() + "  ");        }        System.out.println("\n\nPreorder traversal:");        System.out.println("Expected: M  K  G  A  H  B  L  I  C  D  J  E  F");        System.out.print(  "Actual:   ");        iter = lev1int1.getPreorderIterator();        while (iter.hasNext())        {            System.out.print(iter.next() + "  ");        }                        System.out.println("\n\nPostorder traversal:");        System.out.println("Expected: A  G  B  H  K  C  D  I  E  F  J  L  M");        System.out.print(  "Actual:   ");        iter = lev1int1.getPostorderIterator();        while (iter.hasNext())        {            System.out.print(iter.next() + "  ");        }    }}  